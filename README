HTML5 Domain Specific Language (DSL) for newLISP
————————————————————————————————————————————————

The idea is to be able to write newlisp code as if you were writing HTML5,
avoiding the use of template tags.

So instead of writing:

<html lang="en">
	<head>
		<title><% (print my-title) %></title>
	</head>
</html>

Were you have to use an opening <% and a closing %> each time you need to
insert newlisp code (in this case variable my-title), you write:

(html "lang=en"
	(head
		(title my-title)))

And everything is newlisp code.

To achieve this every HTML5 tag has it's counterpart function.

Every function returns a string with the computed html code.

			
Known issues
————————————

1. While I've made handy constants to specify when a tag has to be kept open or
when it's a continuation from a previous snippet, the functions just receive
the value, which is a string, so it cannot differentiate the strings
"KEEP_OPEN" or "CONTINUE" from the real intention to keep open a tag or to
continue a previous opened tag. However the case for using those exact strings
at the very last part of content of a tag it's pretty exceptional, so I think
we're safe. But keep this in mind should you encounter strange behaviour.


2. One probably will want to split code to allow for reusable snippets, for
example a header function to send on every page request. Also you can think of
a footer, navbar or sidebar too. So you could try this:

(context 'NotHin)
(define (header)
	(context hin) ; this wont work
	(... a bunch of calls to hin functions ...)
	(context MAIN))

Because newlisp double pass parser, on evaluation time newlisp will see calls
like NotHin:html instead of hin:html, and an error will arise.
 
So to define snippets of code you need to use wrap-in-context macro or
replace-this-context-macro like this:


(context ;NotHin)
(define (header)
	(wrap-in-context 'hin
		(... safe calls to hin functions ...)))

Now wrap-in-context must be used with care, because it will overwrite any other
context, not just current. So if you need to take data from, lets say a context
holding data coming from a database, you'll need to use replace-this-context,
which will change only context where current function is being defined.

(context ;NotHin)
(define (header)
	(replace-this-context 'hin
		(... safe calls to hin functions ...)))



Disclaimer
——————————

This is unfinished and experimental code from a newlisp newbie.
